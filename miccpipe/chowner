#!/usr/bin/env python

import sys
import os
from os.path import join as pjoin
from pathlib import Path
from pwd import getpwnam
from grp import getgrnam
import configparser

DICOMIN = "/data/ddrucker/dicomin"

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def _chown(path, uid, gid):
    os.chown(path, uid, gid)
    for root, dirs, files in os.walk(path):
        for _ in dirs:
            os.chown(os.path.join(root, _), uid, gid)
        for _ in files:
            os.chown(os.path.join(root, _), uid, gid)


def registry_chown(studydir):
    if Path(DICOMIN) not in Path(studydir).resolve().parents:
        eprint(f"STUDYDIR {studydir} needs to be within DICOMIN {DICOMIN}")
        sys.exit(1)

    STUDY_DESCRIPTION_FILE = pjoin(studydir, "STUDY_DESCRIPTION")
    studydescription = open(STUDY_DESCRIPTION_FILE).read().rstrip()

    if studydescription not in config:
        eprint(f"{studydescription} not found in registry")
        sys.exit(1)

    user = config[studydescription]["user"]
    group = config[studydescription]["group"]

    print(user)
    _chown(studydir, getpwnam(user).pw_uid, getgrnam(group).gr_gid)
    os.unlink(STUDY_DESCRIPTION_FILE)


if __name__ == "__main__":
    REGISTRY_FILE = pjoin(DICOMIN, "registry.cfg")
    config = configparser.ConfigParser()
    config.read(REGISTRY_FILE)

    for p in Path(DICOMIN).glob("*/STUDY_DESCRIPTION"):
        print(p.parent)
        registry_chown(p.parent)
