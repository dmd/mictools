#!/usr/bin/env python

import sys
import os
from os.path import join as pjoin
from pathlib import Path
from pwd import getpwnam
from grp import getgrnam
import csv


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def _chown(path, uid, gid):
    os.chown(path, uid, gid)
    for root, dirs, files in os.walk(path):
        for _ in dirs:
            os.chown(os.path.join(root, _), uid, gid)
        for _ in files:
            os.chown(os.path.join(root, _), uid, gid)


def registry_chown(studydir):
    if Path(DICOMIN) not in Path(studydir).resolve().parents:
        eprint(f"STUDYDIR {studydir} needs to be within DICOMIN {DICOMIN}")
        sys.exit(1)

    WHOSE_FILE = pjoin(studydir, "WHOSE_DATA_IS_THIS")
    if not os.path.exists(WHOSE_FILE):
        eprint("WHOSE_DATA_IS_THIS file does not exist")
        sys.exit(1)

    studydescription = open(WHOSE_FILE).read().rstrip()

    if studydescription not in owners:
        eprint(f"{studydescription} not found in registry")
        sys.exit(1)
    else:
        owner, group = owners[studydescription]

    print(owner)
    _chown(studydir, getpwnam(owner).pw_uid, getgrnam(group).gr_gid)
    os.unlink(WHOSE_FILE)


DICOMIN = "/data/ddrucker/dicomin"
REGISTRY_FILE = pjoin("/data/ddrucker/dicomin", "registry.txt")

owners = {}
for row in csv.reader(open(REGISTRY_FILE), delimiter="\t"):
    owners[row[0]] = row[1], row[2]

for p in Path(DICOMIN).glob("*/WHOSE_DATA_IS_THIS"):
    print(p.parent)
    registry_chown(p.parent)
